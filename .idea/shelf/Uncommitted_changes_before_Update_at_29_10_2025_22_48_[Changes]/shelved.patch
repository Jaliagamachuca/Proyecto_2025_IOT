Index: app/src/main/java/com/example/proyecto_2025/data/auth/AuthRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.proyecto_2025.data.auth;\r\n\r\nimport com.google.firebase.auth.*;\r\nimport com.google.firebase.firestore.*;\r\nimport java.util.*;\r\nimport static com.google.firebase.firestore.FieldValue.serverTimestamp;\r\n\r\npublic class AuthRepository {\r\n    private final FirebaseAuth auth = FirebaseAuth.getInstance();\r\n    private final FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n    public interface Callback<T> { void onSuccess(T t); void onError(Exception e); }\r\n\r\n    // LOGIN\r\n    public void login(String email, String pass, Callback<DocumentSnapshot> cb) {\r\n        auth.signInWithEmailAndPassword(email, pass)\r\n                .addOnSuccessListener(r ->\r\n                        db.collection(\"users\").document(r.getUser().getUid()).get()\r\n                                .addOnSuccessListener(snap -> {\r\n                                    if (!snap.exists()) { cb.onError(new Exception(\"Perfil no encontrado.\")); return; }\r\n                                    String status = snap.getString(\"status\");\r\n                                    if (!\"active\".equals(status)) { cb.onError(new Exception(\"Usuario deshabilitado.\")); return; }\r\n                                    cb.onSuccess(snap);\r\n                                })\r\n                                .addOnFailureListener(cb::onError)\r\n                )\r\n                .addOnFailureListener(cb::onError);\r\n    }\r\n\r\n    public void signUp(String name, String email, String pass, String role, Callback<Void> cb) {\r\n        auth.createUserWithEmailAndPassword(email, pass)\r\n                .addOnSuccessListener(r -> {\r\n                    String uid = r.getUser().getUid();\r\n                    Map<String,Object> m = new HashMap<>();\r\n                    m.put(\"uid\", uid);\r\n                    m.put(\"email\", email);\r\n                    m.put(\"displayName\", name);\r\n                    m.put(\"role\", role.toLowerCase());\r\n                    m.put(\"status\", \"active\");\r\n                    m.put(\"companyId\", null);\r\n                    m.put(\"createdAt\", serverTimestamp());\r\n                    m.put(\"updatedAt\", serverTimestamp());\r\n                    db.collection(\"users\").document(uid).set(m)\r\n                            .addOnSuccessListener(v -> cb.onSuccess(null))\r\n                            .addOnFailureListener(cb::onError);\r\n                })\r\n                .addOnFailureListener(cb::onError);\r\n    }\r\n\r\n    public void logout(){ auth.signOut(); }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/proyecto_2025/data/auth/AuthRepository.java b/app/src/main/java/com/example/proyecto_2025/data/auth/AuthRepository.java
--- a/app/src/main/java/com/example/proyecto_2025/data/auth/AuthRepository.java	(revision c1d6dd080008e934a89da6ccd27e6181f2ad3c47)
+++ b/app/src/main/java/com/example/proyecto_2025/data/auth/AuthRepository.java	(date 1761681714030)
@@ -47,5 +47,46 @@
                 .addOnFailureListener(cb::onError);
     }
 
+    // Buscar usuario por email (para promoci√≥n)
+    public void findUserByEmail(String email, Callback<QuerySnapshot> cb){
+        db.collection("users")
+                .whereEqualTo("email", email).limit(1)
+                .get()
+                .addOnSuccessListener(cb::onSuccess)
+                .addOnFailureListener(cb::onError);
+    }
+
+    // Promover a admin (cambia role + companyId)
+    public void promoteToAdmin(String uid, String companyId, Callback<Void> cb){
+        Map<String,Object> m = new HashMap<>();
+        m.put("role","admin");
+        m.put("companyId", companyId);
+        m.put("updatedAt", FieldValue.serverTimestamp());
+        db.collection("users").document(uid).update(m)
+                .addOnSuccessListener(v -> cb.onSuccess(null))
+                .addOnFailureListener(cb::onError);
+    }
+
+    // (Opcional) Crear admin desde cero (Auth + Firestore)
+    public void createAdminFromScratch(String name, String email, String pass, String companyId, Callback<Void> cb){
+        auth.createUserWithEmailAndPassword(email, pass)
+                .addOnSuccessListener(r -> {
+                    String uid = r.getUser().getUid();
+                    Map<String,Object> u = new HashMap<>();
+                    u.put("uid", uid);
+                    u.put("email", email);
+                    u.put("displayName", name);
+                    u.put("role", "admin");
+                    u.put("status", "active");
+                    u.put("companyId", companyId);
+                    u.put("createdAt", FieldValue.serverTimestamp());
+                    u.put("updatedAt", FieldValue.serverTimestamp());
+                    db.collection("users").document(uid).set(u)
+                            .addOnSuccessListener(x -> cb.onSuccess(null))
+                            .addOnFailureListener(cb::onError);
+                })
+                .addOnFailureListener(cb::onError);
+    }
+
     public void logout(){ auth.signOut(); }
 }
